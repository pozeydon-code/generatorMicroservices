import os
from utilities.filesystem.create_directory import create_directory
from utilities.filesystem.create_file import create_file


def generate_errors(errors_path, service_name):
    create_directory(errors_path)
    lines = [
        "using System.Diagnostics;",
        "using ErrorOr;",
        "using Microsoft.AspNetCore.Mvc;",
        "using Microsoft.AspNetCore.Mvc.Infrastructure;",
        "using Microsoft.AspNetCore.Mvc.ModelBinding;",
        "",
        f"namespace {service_name}.API.Common.Errors;",
        "",
        f"public class {service_name}ProblemDetailsFactory : ProblemDetailsFactory",
        "{",
        "    private readonly ApiBehaviorOptions _options;",
        f"    public {service_name}ProblemDetailsFactory(ApiBehaviorOptions options)",
        "    {",
        "        _options = options ?? throw new ArgumentNullException(nameof(options));",
        "    }",
        "",
        "    public override ProblemDetails CreateProblemDetails(",
        "    HttpContext httpContext,",
        "    int? statusCode = null,",
        "    string? title = null,",
        "    string? type = null,",
        "    string? detail = null,",
        "    string? instance = null)",
        "    {",
        "        statusCode ??= 500;",
        "",
        "        var problemDetails = new ProblemDetails",
        "        {",
        "            Status = statusCode,",
        "            Title = title,",
        "            Type = type,",
        "            Detail = detail,",
        "            Instance = instance",
        "        };",
        "",
        "        ApplyProblemDetailsDefaults(httpContext, problemDetails, statusCode.Value);",
        "",
        "        return problemDetails;",
        "    }",
        "",
        "    public override ValidationProblemDetails CreateValidationProblemDetails(",
        "        HttpContext httpContext,",
        "        ModelStateDictionary modelStateDictionary,",
        "        int? statusCode = null,",
        "        string? title = null,",
        "        string? type = null,",
        "        string? detail = null,",
        "        string? instance = null)",
        "    {",
        "        if (modelStateDictionary == null)",
        "        {",
        "            throw new ArgumentNullException(nameof(modelStateDictionary));",
        "        }",
        "",
        "        statusCode ??= 400;",
        "",
        "        var problemDetails = new ValidationProblemDetails(modelStateDictionary)",
        "        {",
        "            Status = statusCode,",
        "            Type = type,",
        "            Detail = detail,",
        "            Instance = instance",
        "        };",
        "",
        "        if(title != null)",
        "        {",
        "            problemDetails.Title = title;",
        "        }",
        "",
        "        ApplyProblemDetailsDefaults(httpContext, problemDetails, statusCode.Value);",
        "",
        "        return problemDetails;",
        "",
        "    }",
        "",
        "    private void ApplyProblemDetailsDefaults(HttpContext httpContext, ProblemDetails problemDetails, int statusCode)",
        "    {",
        "        problemDetails.Status ??= statusCode;",
        "",
        "        if (_options.ClientErrorMapping.TryGetValue(statusCode, out var clientErrorData))",
        "        {",
        "            problemDetails.Title ??= clientErrorData.Title;",
        "            problemDetails.Type ??= clientErrorData.Link;",
        "        }",
        "",
        "        var traceId = Activity.Current?.Id ?? httpContext.TraceIdentifier;",
        "        if (traceId != null)",
        "        {",
        "            problemDetails.Extensions[\"traceId\"] = traceId;",
        "        }",
        "",
        "        var errors = httpContext?.Items[HttpContextItemKeys.Errors] as List<Error>;",
        "",
        "        if (errors is not null)",
        "        {",
        "            problemDetails.Extensions.Add(\"errorCodes\", errors.Select(e => e.Code));",
        "        }",
        "    }",
        "}",
    ]
    create_file(os.path.join(errors_path, f"{service_name}ProblemDetailsFactory.cs"), "\n".join(lines))


def generate_http(http_path, service_name):
    create_directory(http_path)
    lines = [
        f"namespace {service_name}.API.Common.Errors;",
        "",
        "public static class HttpContextItemKeys",
        "{",
        "    public const string Errors = \"errors\";",
        "}",
    ]
    create_file(os.path.join(http_path, f"{service_name}HttpContextItemKeys.cs"), "\n".join(lines))
